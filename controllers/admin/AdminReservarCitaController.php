<?php

class AdminReservarCitaControllerCore extends AdminController
{

    public function __construct()
    {
        $this->bootstrap = true;
        $this->table = 'reservar_cita';
        $this->className = 'ReservarCita';
        $this->lang = false;
        $this->context = Context::getContext();
//        $this->addRowAction('edit');
//        $this->addRowAction('delete');
//        $this->addRowAction('view');

        parent::__construct();


        $this->_join .= 'LEFT JOIN `'._DB_PREFIX_.'employee` ea ON (ea.`id_employee` = a.`id_colaborador` AND a.`id_shop` = '.$this->context->shop->id.')';
        $this->_join .= 'LEFT JOIN `'._DB_PREFIX_.'customer` ec ON (ec.`id_customer` = a.`id_customer` AND a.`id_shop` = '.$this->context->shop->id.')';
        $this->_select .= 'CONCAT_WS(" ",ea.firstname, ea.lastname) as colaborador, ea.firstname as cliente';

        $this->fields_list = array(
            'id_reservar_cita' => array('align' => 'hide', 'class' => 'hide'),
            'fecha_inicio' => array('title' => $this->l('Fecha Apertura'),  'type' => 'date',),
            'hora' => array('title' => $this->l('Hora'),  'havingFilter' => true),
            'colaborador' => array('title' => $this->l('Colaborador'),  'havingFilter' => true),
            'cliente' => array('title' => $this->l('Cliente'),  'havingFilter' => true),
            'product_name' => array('title' => $this->l('Servicio'),  'havingFilter' => true),
        );
        
    }
    public function setMedia($isNewTheme = false)
    {
        parent::setMedia($isNewTheme); // TODO: Change the autogenerated stub

        $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/default/css/waitMe.min.css');
        $this->addJs(__PS_BASE_URI__ . $this->admin_webpath . '/themes/default/js/waitMe.min.js');
    }

    public function initPageHeaderToolbar()
    {
        if (empty($this->display))
            $this->page_header_toolbar_btn['new_cita'] = array(
                'href' => self::$currentIndex.'&addreservar_cita&token='.$this->token,
                'desc' => $this->l('Crear Cita', null, null, false),
                'icon' => 'process-icon-new'
            );

        parent::initPageHeaderToolbar();
    }

    public function renderForm()
    {

        $this->fields_form = array(
            'legend' => array(
                'title' => $this->l('Cita'),
                'icon' => 'icon-group'
            ),
            'input' => array(),
            'submit' => array(
                'title' => $this->l('Save'),
            )
        );

        $this->context->smarty->assign(array(

        ));

        return parent::renderForm();
    }

    public function ajaxProcessGetCitasByColaborador()
    {
        $id_colaborador = Tools::getValue('id_colaborador');

        $citas = ReservarCita::getCitasByColadorador($id_colaborador);

        die(json_encode(array(
            "respuesta" => "ok",
            "citas" => $citas
        )));
    }
}

